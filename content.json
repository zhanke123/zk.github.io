{"meta":{"title":"忆天小站","subtitle":"","description":"忆天的博客","author":"Z K","url":"http://yoursite.com","root":"/"},"pages":[{"title":"404","text":"","path":"404/index.html","date":"11-22","excerpt":""},{"title":"categories","text":"","path":"categories/index.html","date":"11-22","excerpt":""},{"title":"Tags","text":"","path":"tags/index.html","date":"11-22","excerpt":""},{"title":"search","text":"","path":"search/index.html","date":"11-22","excerpt":""}],"posts":[{"title":"前端路由与后端路由","text":"什么是路由： 路由（routing）就是通过互联的网络把信息从源地址传输到目的地址的活动 — 维基百科 123路由器提供了两种机制， 路由和转发• 路由是决定数据包从来源到目的地的路径• 转发将输入端的数据转移到合适的输出端 了解前端路由与后端路由前首先了解一下两者到底是什么。 后端路由123早期的网站开发，整个 HTML 页面都是是由服务器来渲染的，服务器直接生产渲染好对应的 HTML 页面, 返回给客户端进行展示但是, 服务器如何处理一个网站的诸多页面呢?首先，一个页面会有自己对应的网址, 也就是 URL，客户端发生请求时，URL 会发送到服务器，服务器通过正则对该URL 进行匹配且最后交给 Controller 进行处理，Controller 进行各种处理后，最终生成 HTML 或者数据，返回给前端，这就完成了一个IO操作，这种操作, 就是后端路由。 后端路由的优点12当页面中需要请求不同的路径内容时，交给服务器来进行处理, 服务器渲染好整个页面，并且将页面返回给客户端，这种情况下渲染好的页面，不需要单独加载任何的 js 和 css，可以直接交给浏览器展示，这样也有利于 SEO 的优化。 后端路由的缺点1231.整个页面的模块都要由后端人员来编写和维护，工作量太大2.前端开发人员如果要开发页面，需要通过 PHP 和 Java 等语言来编写页面代码，增加了额外的学习成本3.HTML 代码和数据以及对应的逻辑混在一起,，不利于编写和维护 前端路由1前端路由的核心：改变URL，但是页面不进行整体的刷新 前后端分离1234随着 Ajax 的出现，有了前后端分离的开发模式：后端只提供 API 来返回数据，前端通过 Ajax 获取数据，并且可以通过 JavaScript 将数据渲染到页面中优点：• 前后端责任变得很清晰，后端专注于数据上, 前端专注于交互和可视化上• 当移动端(iOS/Android)出现后，后端不需要进行任何处理， 依然使用之前的一套API即可 单页面富应用12单页面富应用，即单页Web应用（single page web application，SPA），就是只有一张 Web 页面的应用，是加载单个 HTML 页面并在用户与应用程序交互时动态更新该页面的 Web 应用程序简单理解：就是在前后端分离的基础上加了一层前端路由 单页面富应用的特点1234·速度：更好的用户体验，让用户在 web app 感受 native app 的速度和流畅·MVVM：经典 MVVM 开发模式，前后端各负其责·ajax：重前端，业务逻辑全部在本地操作，数据都需要通过AJAX同步、提交·路由：在 URL 中采用 # 号来作为当前视图的地址，改变 # 号后的参数，页面并不会重载 单页面富应用的缺点123·首屏渲染等待时长： 必须得加载完毕，才能渲染出首屏·seo不友好：爬虫只能拿到一个 div，认为页面是空的，不利于 seo·初次加载耗时多：为实现单页Web应用功能及显示效果，需要在加载页面的时候将 JavaScript、CSS 统一加载，部分页面可以在需要的时候加载，所以必须对JavaScript 及 CSS 代码进行合并压缩处理，如果使用第三方库，建议使用一些大公司的 CDN，因此带宽的消耗是必然的 单页面富应用的优点1234·良好的交互体验：用户不需要重新刷新页面，获取数据也是通过 Ajax 异步获取，页面显示流畅·良好的前后端工作分离模式：单页 Web 应用可以和 RESTful 规约一起使用，通过 REST API 提供接口数据，并使用 Ajax 异步获取，这样有助于分离客户端和服务器端工作，更进一步，可以在客户端也可以分解为静态页面和页面交互两个部分·减轻服务器压力：服务器只用出数据就可以，不用管展示逻辑和页面合成，吞吐能力会提高几倍·共用一套后端程序代码：不用修改后端程序代码就可以同时用于 Web 界面、手机、平板等多种客户端 简单区分前端路由与后端路由12早期，后端渲染相当于把整个页面放在整个后端服务器中进行渲染，每一个页面相就是一个URL，后端渲染的目的就是将所有页面渲染完毕，最后变成一个个可以直接交给前端使用的页面。前端渲染相当于直接从静态资源服务器中请求一堆HTML+CSS+JS代码，然后对这些代码进行渲染，最后直接在前端形成一个个页面，而后端API服务器就相当于数据存储器，只负责将数据发送到前端已经渲染完成的模块中。","path":"2020/04/04/前端路由与后端路由/","date":"04-04","excerpt":"","tags":[]},{"title":"Vue.js和原生JavaScript在编程模式上的区别","text":"Vue.js概念:Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。 编程模式的改变:了解Vue我们会明白，vue是一个构建用户界面的框架(库),它的目标是通过尽可能简单的api实现响应的数据绑定和组合的视图集合 vue自身不是一个全能框架的核心是只关注视图层,因此它非常容易学习，非常容易与其它库或已有项目整合 vue在与相关工具和支持库一起使用时,也能完美地驱动复杂的单页应用,但是在初学阶段一直苦恼着，为什么总感觉学起来比以前学习更别扭。原因在于Vue和之前编程在编程模式上的不同。 什么是编程思维：简单来说，“ 编程思维 ”并不是编写程序的技巧，而是一种高效解决问题的思维方式。“编程思维”就是“理解问题——找出路径”的思维过程，它由分解—识别模式—抽象—算法四个步骤组成： 1234567***分解**，把一个复杂的大问题，拆解成更可执行、更好理解的小步骤。***模式识别**，找出相似模式，高效解决细分问题。***抽象**，聚焦最重要的信息，忽视无用细节。***算法**，设计一步一步的解决路径，解决整个问题。 而说到底编程模式的不同其实也就是思维方式的不同。 原生JavaScript属于命令式编程模式，Vue属于声明式编程模式 命令式编程模式：命令式编程简单来说就是命令“机器”如何去做事情（how），这样不管你想要的是什么（what），它都会按照你的命令实现。 举个简单的JavaScript的例子： 123456&lt;button onclick=&quot;name&quot;&gt;点击&lt;/button&gt;&lt;script&gt; function name()&#123; document.write(Date()); &#125;&lt;/script&gt; 这串代码就由简单的几步完成： 1231、先function创建函数2、通过button里面的onclick调用3、将函数行为传递给button对象&quot;点击&quot; 其中的按钮内容”点击”需要在HTML标签内修改 声明式编程模式：声明式编程简单来说就是告诉“机器”你想要的是什么(what)，让机器想出如何去做(how)。 举个简单的Vue例子： 123456789&lt;div id=&quot;name&quot;&gt;&#123;&#123;say&#125;&#125;&lt;/div&gt;&lt;script&gt; const name=new Vue(&#123; el:&apos;#name&apos;,//用于挂载管理的元素 data:&#123; //定义数据 say:&apos;hello!&apos; &#125; )&#125;&lt;/script&gt; 简单来说，声明式编程就是完全的把HTML代码和JavaScript代码独立开了： 1231、Vue先挂载所要管理的元素id2、直接对元素内部数据进行定义修改3、HTML代码直接寻找在JavaScript中对应元素的数据 其中HTML的地位相当于一个外框，直接向里面加入对应的数据即可 总而言之，学习Vue不必害怕，这种陌生的感觉其实就是编程模式的改变，当然，声明式编程在实际应用上的优势是命令式所不及的，了解到编程模式的不同学习起来就会轻松很多。 1ps:个人才刚接触Vue和博客，其实还什么都不太懂，只能把所能理解到的东西写上去，感觉也挺差的，是否有误或者有缺陷或者有些地方瞎眼只能以后回顾的时候再作思考了- -! 学习之路永无止境，能学多少算多少","path":"2019/11/22/第一篇/","date":"11-22","excerpt":"","tags":[]},{"title":"第一篇","text":"第一篇文章就是写着玩的= =","path":"2019/11/22/第一篇-1/","date":"11-22","excerpt":"","tags":[]},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","path":"2019/11/22/hello-world/","date":"11-22","excerpt":"","tags":[]}]}